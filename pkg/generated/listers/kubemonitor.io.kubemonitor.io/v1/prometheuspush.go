/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noovertime7/kubemonitor/api/kubemonitor.io.kubemonitor.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrometheusPushLister helps list PrometheusPushes.
// All objects returned here must be treated as read-only.
type PrometheusPushLister interface {
	// List lists all PrometheusPushes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PrometheusPush, err error)
	// PrometheusPushes returns an object that can list and get PrometheusPushes.
	PrometheusPushes(namespace string) PrometheusPushNamespaceLister
	PrometheusPushListerExpansion
}

// prometheusPushLister implements the PrometheusPushLister interface.
type prometheusPushLister struct {
	indexer cache.Indexer
}

// NewPrometheusPushLister returns a new PrometheusPushLister.
func NewPrometheusPushLister(indexer cache.Indexer) PrometheusPushLister {
	return &prometheusPushLister{indexer: indexer}
}

// List lists all PrometheusPushes in the indexer.
func (s *prometheusPushLister) List(selector labels.Selector) (ret []*v1.PrometheusPush, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PrometheusPush))
	})
	return ret, err
}

// PrometheusPushes returns an object that can list and get PrometheusPushes.
func (s *prometheusPushLister) PrometheusPushes(namespace string) PrometheusPushNamespaceLister {
	return prometheusPushNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrometheusPushNamespaceLister helps list and get PrometheusPushes.
// All objects returned here must be treated as read-only.
type PrometheusPushNamespaceLister interface {
	// List lists all PrometheusPushes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PrometheusPush, err error)
	// Get retrieves the PrometheusPush from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.PrometheusPush, error)
	PrometheusPushNamespaceListerExpansion
}

// prometheusPushNamespaceLister implements the PrometheusPushNamespaceLister
// interface.
type prometheusPushNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrometheusPushes in the indexer for a given namespace.
func (s prometheusPushNamespaceLister) List(selector labels.Selector) (ret []*v1.PrometheusPush, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PrometheusPush))
	})
	return ret, err
}

// Get retrieves the PrometheusPush from the indexer for a given namespace and name.
func (s prometheusPushNamespaceLister) Get(name string) (*v1.PrometheusPush, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("prometheuspush"), name)
	}
	return obj.(*v1.PrometheusPush), nil
}
